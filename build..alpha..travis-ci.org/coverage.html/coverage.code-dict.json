{"/home/travis/build/npmtest/node-npmtest-hapi-authorization/test.js":"/* istanbul instrument in package npmtest_hapi_authorization */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-authorization/lib.npmtest_hapi_authorization.js":"/* istanbul instrument in package npmtest_hapi_authorization */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hapi_authorization = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hapi_authorization = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-authorization/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hapi-authorization && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hapi_authorization */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hapi_authorization\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hapi_authorization.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hapi_authorization.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hapi_authorization.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hapi_authorization.__dirname + '/lib.npmtest_hapi_authorization.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hapi-authorization/node_modules/hapi-authorization/index.js":"module.exports = require('./lib');","/home/travis/build/npmtest/node-npmtest-hapi-authorization/node_modules/hapi-authorization/lib/index.js":"// External modules\nvar Boom\t= require('boom');\nvar Hoek\t= require('hoek');\nvar Q\t\t\t= require('q');\n\n// Internal modules\nvar Roles\t\t\t\t\t= require('./roles');\nvar Schema\t\t\t\t= require('./schema');\nvar RoleHierarchy\t= Roles.hierarchy;\nvar ACL\t\t\t\t\t\t= require('./acl');\n\nvar pluginName = 'hapiAuthorization';\nvar internals = {\n\tdefaults: {\n\t\troles: Roles.roles,\n\t\thierarchy: false,\n\t\troleHierarchy: RoleHierarchy\n\t}\n};\n\n/**\n * Registers the plugin\n *\n * @param plugin\n * @param options\n * @param next\n */\nexports.register = function (server, options, next) {\n\n\ttry {\n\t\t// Validate the options passed into the plugin\n\t\tSchema.assert('plugin', options, 'Invalid settings');\n\n\t\tvar settings = Hoek.applyToDefaults(internals.defaults, options || {});\n\n\t\tserver.bind({\n\t\t\tconfig: settings\n\t\t});\n\n\t\t// Validate the server options on the routes\n\t\tif (server.after) { // Support for hapi < 11\n\t\t\tserver.after(internals.validateRoutes);\n\t\t} else {\n\t\t\tserver.ext('onPreStart', internals.validateRoutes);\n\t\t}\n\t\tserver.ext('onPreHandler', internals.onPreHandler);\n\n\t\tnext();\n\t} catch (e) {\n\n\t\tnext(e);\n\t}\n};\n\n/**\n * Gets the name and version from package.json\n */\nexports.register.attributes = {\n\tpkg: require('../package.json')\n};\n\n\n/**\n * Runs on server start and validates that every route that has hapi-authorization params is valid\n *\n * @param server\n * @param next\n */\ninternals.validateRoutes = function(server, next) {\n\n\ttry {\n\t\t// Loop through each connection in the server\n\t\tserver.connections.forEach(function(connection) {\n\n\t\t\tvar routes = (connection.routingTable) ? connection.routingTable() : connection.table();\n\n\t\t\t// Loop through each route\n\t\t\troutes.forEach(function(route) {\n\n\t\t\t\tvar hapiAuthorizationParams = route.settings.plugins[pluginName] ? route.settings.plugins[pluginName] : false;\n\n\t\t\t\t// If there are hapi-authorization params and are not disabled by using \"false\", validate em\n\t\t\t\tif (hapiAuthorizationParams !== false) {\n\n\t\t\t\t\t// If there is a default auth\n\t\t\t\t\tif(connection.auth.settings.default) {\n\n\t\t\t\t\t\t// If there is also an auth on the route, make sure it's not false or null\n\t\t\t\t\t\tif(route.settings.auth !== undefined) {\n\n\t\t\t\t\t\t\t// Make sure that there is either a default auth being set, or that there is an auth specified on every route with hapiAuthorization plugin params\n\t\t\t\t\t\t\tHoek.assert(route.settings.auth !== null && route.settings.auth !== false, 'hapi-authorization can be enabled only for secured route');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Else there is no default auth set, so validate each route's auth\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Make sure that there is either a default auth being set, or that there is an auth specified on every route with hapiAuthorization plugin params\n\t\t\t\t\t\tHoek.assert(route.settings.auth && route.settings.auth !== null && route.settings.auth !== false, 'hapi-authorization can be enabled only for secured route');\n\t\t\t\t\t}\n\n\t\t\t\t\tSchema.assert('route', hapiAuthorizationParams, 'Invalid settings');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tnext();\n\t}\n\tcatch (err) {\n\t\tnext(err);\n\t}\n};\n\n/**\n * Checks if hapi-authorization is active for the current route and execute the necessary steps accordingly.\n *\n * @param request\n * @param reply\n */\ninternals.onPreHandler = function(request, reply) {\n\n\t\t// Ignore OPTIONS requests\n\t\tif(request.route.method === 'options') {\n\t\t\treturn reply.continue();\n\t\t}\n\n\t\tvar params;\n\t\ttry{\n\t\t\t// Check if the current route is hapi-authorization enabled\n\t\t\tparams = internals.getRouteParams(request);\n\t\t}\n\t\tcatch(err){\n\t\t\treturn reply(Boom.badRequest(err.message));\n\t\t}\n\n\t\t// if hapi-authorization is enabled, get the user\n\t\tif (params) {\n\n\t\t\tvar user = request.auth.credentials;\n\n\t\t\tif (!request.plugins[pluginName]) {\n\t\t\t\trequest.plugins[pluginName] = {};\n\t\t\t}\n\n\t\t\tvar roleHierarchy = null;\n\n\t\t\t// If we're not using hierarchy\n\t\t\tif(this.config.hierarchy === true) {\n\t\t\t\t// this.config comes from plugin.bind\n\t\t\t\troleHierarchy = this.config.roleHierarchy;\n\t\t\t} else {\n\t\t\t\troleHierarchy = false;\n\t\t\t}\n\n\t\t\tQ\n\t\t\t\t// Checks roles\n\t\t\t\t.fcall(function () {\n\t\t\t\t\tif (params.role || params.roles) {\n\t\t\t\t\t\tvar err = ACL.checkRoles(user, params.role || params.roles, roleHierarchy);\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t\t// Fetches acl entities\n\t\t\t\t.then(function () {\n\t\t\t\t\tif (params.aclQuery) {\n\t\t\t\t\t\tvar parameter = request[params.paramSource][params.aclQueryParam];\n\t\t\t\t\t\treturn ACL.fetchEntity(params.aclQuery, parameter, request);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t})\n\t\t\t\t// Store the entity\n\t\t\t\t.then(function(entity) {\n\t\t\t\t\tif (entity) {\n\t\t\t\t\t\trequest.plugins[pluginName].entity = entity;\n\t\t\t\t\t\treturn entity;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// Validate the ACL settings\n\t\t\t\t.then(function(entity) {\n\t\t\t\t\tif (params.validateEntityAcl) {\n\t\t\t\t\t\tif (!entity) {\n\t\t\t\t\t\t\tthrow new Error('Entity is required');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn ACL.validateEntityAcl(user, params.role, entity, params.validateAclMethod, params);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t})\n\t\t\t\t.then(function () {\n\t\t\t\t\treply.continue();\n\t\t\t\t})\n\t\t\t\t// Handles errors\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\treply(err);\n\t\t\t\t});\n\n\t\t} else {\n\t\t\treply.continue();\n\t\t}\n};\n\n/**\n * Returns the plugin params for the current request\n *\n * @param request\n * @returns {*}\n */\ninternals.getRouteParams = function(request) {\n\n\tif (request.route.settings.plugins[pluginName]) {\n\t\tvar params = request.route.settings.plugins[pluginName];\n\t\treturn Schema.assert('route', params, 'Invalid settings');\n\t} else {\n\t\treturn null;\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-hapi-authorization/node_modules/hapi-authorization/lib/roles.js":"/**\n * The default roles and role hierarchy if a custom one isn't passed in\n */\n\n// The default roles\n//var RoleTypes = {\n//  SUPER_ADMIN: 'SUPER_ADMIN',\n//  ADMIN: 'ADMIN',\n//  USER: 'USER',\n//  GUEST: 'GUEST'\n//};\n\nvar SUPER_ADMIN\t= 'SUPER_ADMIN';\nvar ADMIN\t\t\t\t= 'ADMIN';\nvar USER\t\t\t\t= 'USER';\nvar GUEST\t\t\t\t= 'GUEST';\n\n// The default roles and hierarchy\nvar RoleTypes = [SUPER_ADMIN, ADMIN, USER, GUEST];\nvar RoleHierarchy = RoleTypes;\t// Is the same because of the order we defined them\n\n// The default role hierarchy\n//var RoleHierarchy = [];\n//RoleHierarchy.SUPER_ADMIN\t= [SUPER_ADMIN, ADMIN, USER, GUEST];\n//RoleHierarchy.ADMIN\t\t\t\t= [ADMIN, USER, GUEST];\n//RoleHierarchy.USER\t\t\t\t= [USER, GUEST];\n//RoleHierarchy.GUEST\t\t\t\t= [GUEST];\n\nmodule.exports = {\n  roles: RoleTypes,\n  hierarchy: RoleHierarchy\n};","/home/travis/build/npmtest/node-npmtest-hapi-authorization/node_modules/hapi-authorization/lib/schema.js":"var Joi = require('joi');\nvar Hoek = require('hoek');\n\n// Internals\nvar internals = {};\n\n/**\n * Assert that the params are valid for the type passed in\n *\n * @param type\t\t- The type of object we want to validate for. i.e. route, plugin\n * @param options\t- The JSON object to be validated\n * @param message\t- Part of the message if validation fails\n * @returns {*}\n */\nexports.assert = function (type, options, message) {\n\n\tvar validationObj = Joi.validate(options, internals[type]);\n\tvar error = validationObj.error;\n\tvar errorMessage = null;\n\n\t// If there is an error, build a nice error message\n\tif(error) {\n\t\terrorMessage = error.name + ':';\n\t\terror.details.forEach(function(err) {\n\t\t\terrorMessage += ' ' + err.message;\n\t\t});\n\t}\n\n\t// If there is an error build the error message\n\tHoek.assert(!error, 'Invalid', type, 'options', message ? '(' + message + ')' : '', errorMessage);\n\n\treturn validationObj.value;\n};\n\n\n/**\n * Validation rules for a route's params\n */\ninternals.route = Joi.object({\n\trole: Joi.string().optional(),\n\troles: Joi.array().optional(),\n\taclQuery: Joi.func().when('validateEntityAcl', {is: true, then: Joi.required()}),\n\taclQueryParam: Joi.string().default('id'),\n\tparamSource: Joi.string().allow('payload', 'params', 'query').default('params'),\n\tvalidateEntityAcl: Joi.boolean().default(false),\n\tvalidateAclMethod: Joi.string().default(null),\n\tentityUserField: Joi.string().default(\"_user\"),\n\tentityRoleField: Joi.string().default(\"role\"),\n\tuserIdField: Joi.string().default(\"_id\"),\n\tuserRoleField: Joi.string().default(\"role\")\n}).without('role', 'roles').options({ allowUnknown: false });\n\n\n/**\n * Validation rules for the plugin's params\n */\ninternals.plugin = Joi.object({\n\troles: [Joi.array().optional(), Joi.bool().allow(false).optional()],\n\thierarchy: Joi.bool().optional(),\n\troleHierarchy: Joi.array().optional()\n}).options({allowUnknown: false});\n","/home/travis/build/npmtest/node-npmtest-hapi-authorization/node_modules/hapi-authorization/lib/acl.js":"// External modules\nvar Boom\t= require('boom');\nvar Q\t\t\t= require('q');\nvar _\t\t\t= require('underscore');\n\n// Declare of internals\nvar internals = {};\n\n\n/**\n * Checks if the user has the wanted roles\n *\n * @param user\t- The user to check if they have a role\n * @param role\t- The role to check if the user has\n * @returns {*}\n */\nexports.checkRoles = function(user, role, hierarchy) {\n\n\tif ((!user) || (!internals.isGranted(user.role, role, hierarchy))) {\n\t\treturn Boom.forbidden('Unauthorized');\n\t}\n\n\treturn null;\n};\n\n/**\n * Checks if the provided user role is included is the required role or is included in the required role hierarchy\n *\n * @param userRole\t\t\t- The role(s) that the user has\n * @param requiredRole\t- The role(s) that is required\n * @returns {boolean}\t\t- True/False whether the user has access\n */\ninternals.isGranted = function(userRole, requiredRole, hierarchy) {\n\n\tvar userRoles = null;\n\n\t// If we're using a hierarchy, get all the possible roles\n\tif(hierarchy) {\n\t\tvar index = hierarchy.indexOf(userRole);\t// Get the index of userRole in the hierarchy\n\n\t\t// If the user's role is not any of the possible roles\n\t\tif (index === -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tuserRoles = _.rest(hierarchy, index);\t// Get all the possible roles in the hierarchy\n\t} else {\n\t\tuserRoles = userRole;\n\t}\n\n\t/*console.log('userRole = '+userRole);\n\tconsole.log('requiredRole = '+requiredRole);\n\tconsole.log('userRoles = '+userRoles);*/\n\n\t// If the requiredRole is an array\n\tif(_.isArray(requiredRole)) {\n\n\t\t// If userRoles is an array, make sure that at least one of the user's roles is in the requiredRoles\n\t\tif(_.isArray(userRoles)) {\n\t\t\treturn !_.isEmpty(_.intersection(userRoles, requiredRole));\n\t\t}\n\t\t// Else the userRoles is NOT an array. Make sure that the user's role is one of the required roles\n\t\telse {\n\t\t\treturn (requiredRole.indexOf(userRoles) > -1);\n\t\t}\n\t}\n\t// Else the requiredRole is NOT an array. make sure that the user's role is in the requiredRoles\n\telse {\n\n\t\t// If the user has no roles\n\t\tif(!userRoles) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (userRoles.indexOf(requiredRole) > -1);\n\t}\n};\n\n/**\n * Fetches the wanted acl entity using the provided\n *\n * @param query - function(id, cb) that returns the entity to the callback.\n * @param param - The \"id\" parameter that need to be provided for to the query\n * @param request - The originating request\n * @param cb - function(err, entity) that will be used to notify the caller about the result of the query\n */\nexports.fetchEntity = function(query, param, request, cb) {\n\n\tvar def = Q.defer();\n\tquery(param, request, function(err, entity) {\n\n\t\tif (err && err.isBoom) {\n\t\t\treturn def.reject(err);\n\t\t} else if (err) {\n\t\t\treturn def.reject(Boom.badRequest('Bad Request', err));\n\t\t}\n\t\telse if (!entity) {\n\t\t\treturn def.reject(Boom.notFound());\n\t\t}\n\t\telse {\n\t\t\tdef.resolve(entity);\n\t\t}\n\t});\n\n\treturn def.promise;\n};\n\n/**\n * Verifies that the user has permission to access the wanted entity.\n *\n * @param user - The authenticated user\n * @param role - The wanted role, undefined means any role\n * @param entity - Verify if the authenticated user has \"role\" grants and can access this entity\n * @param validator - The method that will be used to verify if the user has permissions, this method should be used on the provided entity.\n * @param options - additional options\n * @returns {promise|*|Q.promise}\n */\nexports.validateEntityAcl = function(user, role, entity, validator, options) {\n\n\tvar def = Q.defer();\n\n\tif (!entity) {\n\t\tdef.reject(new Error('validateUserACL must run after fetchACLEntity'));\n\t} else if (!user) {\n\t\tdef.reject(new Error('User is required, please make sure this method requires authentication'));\n\t} else {\n\n\t\tif (validator) {\n\n\t\t\tentity[validator](user, role, function(err, isValid) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\tdef.reject(new Error(err));\n\t\t\t\t} else if (!isValid) {\t// Not granted\n\t\t\t\t\tdef.reject(Boom.forbidden('Unauthorized'));\n\t\t\t\t} else {\t// Valid\n\t\t\t\t\tdef.resolve(isValid);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// Use the default validator\n\t\t\tvar isValid = internals.defaultEntityAclValidator(user, role, entity, options);\n\n\t\t\tif (isValid) {\n\t\t\t\tdef.resolve(isValid);\n\t\t\t} else {\n\t\t\t\tdef.reject(Boom.forbidden('Unauthorized'));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn def.promise;\n};\n\n/**\n * Default validator\n *\n * @param user\n * @param role\n * @param entity\n * @returns {*|string|boolean}\n */\ninternals.defaultEntityAclValidator = function(user, role, entity, options) {\n\treturn (\n\tentity[options.entityUserField] &&\n\tuser[options.userIdField] &&\n\tentity[options.entityUserField].toString() === user[options.userIdField].toString()\n\t);\n};\n"}